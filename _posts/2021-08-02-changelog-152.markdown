---
layout: post
title: "IntelliJ Rust Changelog #152"
date: 2021-08-02 12:00:00 +0300
---


## New Features

* Introduce new [intention actions]:

  * [#7480] `Implement Trait` to implement a trait for a `struct` or `enum` (by [@Kobzol])

    {% include gif-img.html path="/assets/posts/changelog-152/implement-trait" w="600px" %}

    This intention action simplifies the writing of trait `impl`s. It automatically fills `struct` or `enum`
    generics, generates implementations of trait members and allows you to change the concrete types of generics.

  * [#6838] `Convert function to closure` to convert a local function to a closure (by [@nschoellhorn])

    {% include gif-img.html path="/assets/posts/changelog-152/convert-function-to-closure" w="600px" %}

  * [#6813] `Convert closure to function` to convert a closure to a local named function (by [@nschoellhorn])

    {% include gif-img.html path="/assets/posts/changelog-152/convert-closure-to-function" w="600px" %}

  * [#6414] `Replace successive '_' with '..'` to replace redundant `_` patterns with a single `..` (by [@zeroeightysix])

    {% include gif-img.html path="/assets/posts/changelog-152/replace-wildcards" w="600px" %}

  * [#7559] `Simplify dependency specification` for dependencies in `Cargo.toml`

    {% include gif-img.html path="/assets/posts/changelog-152/simplify-dependency-specification" w="600px" %}

* Completion improvements:

  * [#7487], [#7551], [#7536] Complete closure expressions in positions that expect a callable (by [@Kobzol])

    {% include gif-img.html path="/assets/posts/changelog-152/lambda-completion" w="600px" %}

  * [#7481] Complete `pub(crate)` and `pub()` visibility modifiers (by [@Kobzol])

  * [#6410] Complete [layouts] in `repr` attributes (by [@zeroeightysix])

  * [#7534], [#7571] Improve completion for items inside `impl` blocks (by [@Kobzol])

    {% include gif-img.html path="/assets/posts/changelog-152/completion-member" w="600px" %}

* `Unused import` inspection improvements:

  * [#7492] Add a quick fix to remove an unused import (by [@Kobzol])

  * [#7555], [#7535], [#7574] Fix false positives related to unresolved method calls, method calls with type qualifiers
    and usages in [custom derive] procedural macros

  * [#7552] Move `Unused import` inspection into `Rust/Lints` inspection group in settings

  * [#7538], [#7563] Disable `Unused import` inspection in [doctests],
    add an option in the [inspection settings] to enable it

  * [#7564], [#7496] Do not remove unused imports disabled by `cfg` attribute

  * [#7495] Remove unused imports by `Optimize Imports` action
    (`Code | Optimize Imports` or <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>O</kbd>) (by [@Kobzol])

  Note, the inspection is disabled by default for now due to possible false-positive warnings. You can enable it via
  `Preferences | Editor | Inspections` [settings][inspection settings]

* [#7532] Provide quick-fix to implement missing supertraits for `impl` block (by [@Kobzol])

  {% include gif-img.html path="/assets/posts/changelog-152/implement-supertraits" w="600px" %}

* [#7519] Add `.wrap` [postfix template] that wraps an existing type in another type (by [@Kobzol])

  {% include gif-img.html path="/assets/posts/changelog-152/wrap" w="600px" %}

* [#7499] Add filter to [`Structure View`] panel to hide macro-generated items (by [@afetisov])

  {% include gif-img.html path="/assets/posts/changelog-152/filter" w="600px" %}

* [#7521], [#7503] Support type aliases for all Rust types in inlay hints and code generation.
  Previously, only aliases for `struct` or `enum` types were accounted (by [@Kobzol])

  <img src="/assets/posts/changelog-152/alias.png" alt="type aliases" width="600px"/>

* [#7321] [`Show macro expansion`] actions and intentions now show the reason for the expansion failure

* [#7308] Provide an option to add `--nocapture` flag to `cargo test` commands.
  You can turn it on via `Registry... | org.rust.cargo.test.nocapture`

* [#7228] Properly construct links to Rust paths in [quick documentation] (by [@shocoman])

* [#6003] Allow inlining functions with diverging exit points by `Inline Function` refactoring
  (`Refactor | Inline...` or <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>N</kbd>) (by [@SaarYogev])

## Performance Improvements

* [#7576] Slightly optimize `Find usages` for non-`pub` items

## Fixes

* [#7479] Support const arguments that look like type arguments

* [#7611] Fix experimental procedural macro expansion with Rust 1.54 and Rust nightly

* [#7120] Don't suggest `pub(crate)` from other crates for auto-import

* [#6060] Check if `asm!()` macro is contained in an `unsafe` block or function (by [@Stzx])

* [#7567] Render const generics in `Parameter Info` (<kbd>Ctrl</kbd> + <kbd>P</kbd>)

* [#7553] Add a trailing comma by [`Move Statement Up/Down`] action
  (<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>Up</kbd>/<kbd>Down</kbd>) even when there are multiple elements in
  the last line (by [@t-kameyama])

* [#6904] Fix [`Move Statement Up/Down`] action on `vec!` macro arguments (by [@t-kameyama])

* [#7547] Do not offer [live templates] in patterns

* [#7546] Add comma to match arm if needed by `Lift return` quick-fix (by [@t-kameyama])

* [#7540] Filter out existing features in dependency features completion in `Cargo.toml`

* [#7527] Enable [Go to generated declaration] line marker in WASM projects for 2021.2 IDEs

* [#7516] Fix auto-import-aware completion when invoked at an empty place

* [#7428] Show crate roots first in the project view

* [#7411] Take into account the [`CARGO_HOME`] environment variable when using [crates local index]

* [#7383] Fix `Convert impl Trait` intention when the corresponding function already has const parameters (by [@Kobzol])

* [#7334] Do not warn about missing format macro arguments if [`format_args_capture`] unstable feature is
  enabled (by [@Kobzol])

* [#7168] [#7168] Fix false-positive `Module is private` ([E0603](https://doc.rust-lang.org/error-index.html#E0603))
  when using the new name resolution engine

## Internal Improvements

* [#7512] Introduce new `RsTemplateBuilder` API

* [#7321] Improve macro expansion error types & error handling

* [#7452] Use the new `FormattingService` on `2021.2` IDEs

Full set of changes can be found [here](https://github.com/intellij-rust/intellij-rust/milestone/60?closed=1)

[@Kobzol]: https://github.com/Kobzol
[@SaarYogev]: https://github.com/SaarYogev
[@Stzx]: https://github.com/Stzx
[@afetisov]: https://github.com/afetisov
[@nschoellhorn]: https://github.com/nschoellhorn
[@shocoman]: https://github.com/shocoman
[@t-kameyama]: https://github.com/t-kameyama
[@zeroeightysix]: https://github.com/zeroeightysix

[#6003]: https://github.com/intellij-rust/intellij-rust/pull/6003
[#6060]: https://github.com/intellij-rust/intellij-rust/pull/6060
[#6410]: https://github.com/intellij-rust/intellij-rust/pull/6410
[#6414]: https://github.com/intellij-rust/intellij-rust/pull/6414
[#6813]: https://github.com/intellij-rust/intellij-rust/pull/6813
[#6838]: https://github.com/intellij-rust/intellij-rust/pull/6838
[#6904]: https://github.com/intellij-rust/intellij-rust/pull/6904
[#7120]: https://github.com/intellij-rust/intellij-rust/pull/7120
[#7168]: https://github.com/intellij-rust/intellij-rust/pull/7168
[#7228]: https://github.com/intellij-rust/intellij-rust/pull/7228
[#7308]: https://github.com/intellij-rust/intellij-rust/pull/7308
[#7321]: https://github.com/intellij-rust/intellij-rust/pull/7321
[#7334]: https://github.com/intellij-rust/intellij-rust/pull/7334
[#7383]: https://github.com/intellij-rust/intellij-rust/pull/7383
[#7411]: https://github.com/intellij-rust/intellij-rust/pull/7411
[#7428]: https://github.com/intellij-rust/intellij-rust/pull/7428
[#7452]: https://github.com/intellij-rust/intellij-rust/pull/7452
[#7479]: https://github.com/intellij-rust/intellij-rust/pull/7479
[#7480]: https://github.com/intellij-rust/intellij-rust/pull/7480
[#7481]: https://github.com/intellij-rust/intellij-rust/pull/7481
[#7482]: https://github.com/intellij-rust/intellij-rust/pull/7482
[#7487]: https://github.com/intellij-rust/intellij-rust/pull/7487
[#7492]: https://github.com/intellij-rust/intellij-rust/pull/7492
[#7495]: https://github.com/intellij-rust/intellij-rust/pull/7495
[#7496]: https://github.com/intellij-rust/intellij-rust/pull/7496
[#7499]: https://github.com/intellij-rust/intellij-rust/pull/7499
[#7503]: https://github.com/intellij-rust/intellij-rust/pull/7503
[#7512]: https://github.com/intellij-rust/intellij-rust/pull/7512
[#7516]: https://github.com/intellij-rust/intellij-rust/pull/7516
[#7519]: https://github.com/intellij-rust/intellij-rust/pull/7519
[#7521]: https://github.com/intellij-rust/intellij-rust/pull/7521
[#7527]: https://github.com/intellij-rust/intellij-rust/pull/7527
[#7532]: https://github.com/intellij-rust/intellij-rust/pull/7532
[#7534]: https://github.com/intellij-rust/intellij-rust/pull/7534
[#7535]: https://github.com/intellij-rust/intellij-rust/pull/7535
[#7536]: https://github.com/intellij-rust/intellij-rust/pull/7536
[#7538]: https://github.com/intellij-rust/intellij-rust/pull/7538
[#7540]: https://github.com/intellij-rust/intellij-rust/pull/7540
[#7546]: https://github.com/intellij-rust/intellij-rust/pull/7546
[#7547]: https://github.com/intellij-rust/intellij-rust/pull/7547
[#7551]: https://github.com/intellij-rust/intellij-rust/pull/7551
[#7552]: https://github.com/intellij-rust/intellij-rust/pull/7552
[#7553]: https://github.com/intellij-rust/intellij-rust/pull/7553
[#7555]: https://github.com/intellij-rust/intellij-rust/pull/7555
[#7559]: https://github.com/intellij-rust/intellij-rust/pull/7559
[#7563]: https://github.com/intellij-rust/intellij-rust/pull/7563
[#7564]: https://github.com/intellij-rust/intellij-rust/pull/7564
[#7567]: https://github.com/intellij-rust/intellij-rust/pull/7567
[#7571]: https://github.com/intellij-rust/intellij-rust/pull/7571
[#7574]: https://github.com/intellij-rust/intellij-rust/pull/7574
[#7576]: https://github.com/intellij-rust/intellij-rust/pull/7576
[#7611]: https://github.com/intellij-rust/intellij-rust/pull/7611

[intention actions]: https://plugins.jetbrains.com/plugin/8182-rust/docs/rust-code-generation.html#intention-actions
[Go to generated declaration]: https://plugins.jetbrains.com/plugin/8182-rust/docs/wasm-projects-support.html#goto-wasm-bindgen
[`format_args_capture`]: https://github.com/rust-lang/rust/issues/67984
[layouts]: https://doc.rust-lang.org/reference/type-layout.html#representations
[postfix template]: https://plugins.jetbrains.com/plugin/8182-rust/docs/rust-code-generation.html#postfix-completion
[`Structure View`]: https://www.jetbrains.com/help/idea/viewing-structure-of-a-source-file.html
[quick documentation]: https://plugins.jetbrains.com/plugin/8182-rust/docs/rust-code-reference-info.html#quick-docs
[custom derive]: https://doc.rust-lang.org/reference/procedural-macros.html#derive-macros
[`Move Statement Up/Down`]: https://www.jetbrains.com/help/idea/working-with-source-code.html#move-statements
[live templates]: https://plugins.jetbrains.com/plugin/8182-rust/docs/rust-code-generation.html#live-templates
[`CARGO_HOME`]: https://doc.rust-lang.org/cargo/guide/cargo-home.html
[crates local index]: https://github.com/intellij-rust/intellij-rust/issues/6463
[inspection settings]: https://plugins.jetbrains.com/plugin/8182-rust/docs/rust-code-analysis.html#inspection-settings
[doctests]: https://doc.rust-lang.org/rustdoc/documentation-tests.html
[`Show macro expansion`]: https://plugins.jetbrains.com/plugin/8182-rust/docs/rust-code-reference-info.html#macro-exansion
